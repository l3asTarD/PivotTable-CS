// Generated by CoffeeScript 2.5.1
var hasProp = {}.hasOwnProperty;

import {
  deepMerge
} from "../utilities/deepMerge.js";

export var pivotTableRenderer = function(pivotData, opts) {
  var aggregator, c, cSpan, colAttrs, colKey, colKeys, defaults, i, j, r, rSpan, result, rowAttrs, rowKey, rowKeys, spanSize, tbody, tbodyFrag, td, th, thead, theadFrag, totalAggregator, tr, txt, val, x;
  defaults = {
    table: {
      rowTotals: true,
      colTotals: true
    },
    localeStrings: {
      totals: "Totals"
    }
  };
  opts = deepMerge(true, defaults, opts);
  colAttrs = pivotData.colAttrs;
  rowAttrs = pivotData.rowAttrs;
  rowKeys = pivotData.getRowKeys();
  colKeys = pivotData.getColKeys();
  //console.log(pivotData)
  spanSize = function(arr, i, j) {
    var k, l, len, noDraw, ref, ref1, stop, x;
    if (i !== 0) {
      noDraw = true;
      for (x = k = 0, ref = j; (0 <= ref ? k <= ref : k >= ref); x = 0 <= ref ? ++k : --k) {
        if (arr[i - 1][x] !== arr[i][x]) {
          noDraw = false;
        }
      }
      if (noDraw) {
        return -1; //do not draw cell
      }
    }
    len = 0;
    while (i + len < arr.length) {
      stop = false;
      for (x = l = 0, ref1 = j; (0 <= ref1 ? l <= ref1 : l >= ref1); x = 0 <= ref1 ? ++l : --l) {
        if (arr[i][x] !== arr[i + len][x]) {
          stop = true;
        }
      }
      if (stop) {
        break;
      }
      len++;
    }
    return len;
  };
  //the first few rows are for col headers
  result = document.createElement("table");
  result.className = "pvtTable";
  thead = document.createElement("thead");
  theadFrag = document.createDocumentFragment();
  for (j in colAttrs) {
    if (!hasProp.call(colAttrs, j)) continue;
    c = colAttrs[j];
    tr = document.createElement("tr");
    if (parseInt(j) === 0 && rowAttrs.length !== 0) {
      th = `<th colspan=\"${rowAttrs.length}\" rowspan=\"${colAttrs.length}\"></th>`;
      tr.insertAdjacentHTML("beforeend", th);
    }
    th = `<th class=\"pvtAxisLabel\">${c}</th>`;
    tr.insertAdjacentHTML("beforeend", th);
    for (i in colKeys) {
      if (!hasProp.call(colKeys, i)) continue;
      colKey = colKeys[i];
      x = spanSize(colKeys, parseInt(i), parseInt(j));
      if (x !== -1) {
        th = `<th class=\"pvtColLabel\" colspan=\"${x}\">${colKey[j]}</th>`;
        if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {
          th = `<th class=\"pvtColLabel\" colspan=\"${x}\" rowspan=\"2\">${colKey[j]}</th>`;
        }
        tr.insertAdjacentHTML("beforeend", th);
      }
    }
    if (parseInt(j) === 0 && opts.table.rowTotals) {
      rSpan = colAttrs.length + (rowAttrs.length === 0 ? 0 : 1);
      th = `<th class=\"pvtTotalLabel pvtRowTotalLabel\" rowspan=\"${rSpan}\"> ${opts.localeStrings.totals}</th>`;
      tr.insertAdjacentHTML("beforeend", th);
    }
    theadFrag.appendChild(tr);
  }
  
  //then a row for row header headers
  if (rowAttrs.length !== 0) {
    tr = document.createElement("tr");
    for (i in rowAttrs) {
      if (!hasProp.call(rowAttrs, i)) continue;
      r = rowAttrs[i];
      th = `<th class=\"pvtAxisLabel\">${r}</th>`;
      tr.insertAdjacentHTML("beforeend", th);
    }
    th = "<th></th>";
    if (colAttrs.length === 0) {
      th = `<th class=\"pvtTotalLabel pvtRowTotalLabel\">${opts.localeStrings.totals}</th>`;
    }
    tr.insertAdjacentHTML("beforeend", th);
    theadFrag.appendChild(tr);
  }
  thead.appendChild(theadFrag);
  result.appendChild(thead);
  
  //now the actual data rows, with their row headers and totals
  tbody = document.createElement("tbody");
  tbodyFrag = document.createDocumentFragment();
  for (i in rowKeys) {
    if (!hasProp.call(rowKeys, i)) continue;
    rowKey = rowKeys[i];
    tr = document.createElement("tr");
    for (j in rowKey) {
      if (!hasProp.call(rowKey, j)) continue;
      txt = rowKey[j];
      x = spanSize(rowKeys, parseInt(i), parseInt(j));
      if (x !== -1) {
        th = `<th class=\"pvtRowLabel\" rowspan=\"${x}\">${txt}</th>`;
        if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {
          th = `<th class=\"pvtRowLabel\" rowspan=\"${x}\" colspan=\"2\">${txt}</th>`;
        }
        tr.insertAdjacentHTML("beforeend", th);
      }
    }
//this is the tight loop
    for (j in colKeys) {
      if (!hasProp.call(colKeys, j)) continue;
      colKey = colKeys[j];
      aggregator = pivotData.getAggregator(rowKey, colKey);
      val = aggregator.value();
      td = `<td class=\"pvtVal row${i} col${j}\" data-value=\"${val}\">${aggregator.format(val)}</td>`;
      tr.insertAdjacentHTML("beforeend", td);
    }
    if (opts.table.rowTotals || colAttrs.length === 0) {
      totalAggregator = pivotData.getAggregator(rowKey, []);
      val = totalAggregator.value();
      td = `<td class=\"pvtTotal rowTotal\" data-value=\"${val}\">${totalAggregator.format(val)}</td>`;
      tr.insertAdjacentHTML("beforeend", td);
    }
    tbodyFrag.appendChild(tr);
  }
  //finally, the row for col totals, and a grand total
  if (opts.table.colTotals || rowAttrs.length === 0) {
    tr = document.createElement("tr");
    if (opts.table.colTotals || rowAttrs.length === 0) {
      cSpan = rowAttrs.length + (colAttrs.length === 0 ? 0 : 1);
      th = `<th class=\"pvtTotalLabel pvtColTotalLabel\" colspan=\"${cSpan}\">${opts.localeStrings.totals}</th>`;
      tr.insertAdjacentHTML("beforeend", th);
    }
    for (j in colKeys) {
      if (!hasProp.call(colKeys, j)) continue;
      colKey = colKeys[j];
      totalAggregator = pivotData.getAggregator([], colKey);
      val = totalAggregator.value();
      td = `<td class=\"pvtTotal colTotal\" data-value=\"${val}\" data-for=\"col${j}\"> ${totalAggregator.format(val)}</td>`;
      tr.insertAdjacentHTML("beforeend", td);
    }
    if (opts.table.rowTotals || colAttrs.length === 0) {
      totalAggregator = pivotData.getAggregator([], []);
      val = totalAggregator.value();
      td = `<td class=\"pvtGrandTotal\" data-value=\"${val}\">${totalAggregator.format(val)}</td>`;
      tr.insertAdjacentHTML("beforeend", td);
    }
    tbodyFrag.appendChild(tr);
  }
  tbody.appendChild(tbodyFrag);
  result.appendChild(tbody);
  //squirrel this away for later
  result.setAttribute("data-numrows", rowKeys.length);
  result.setAttribute("data-numcols", colKeys.length);
  return result;
};
