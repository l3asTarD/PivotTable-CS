// Generated by CoffeeScript 2.5.1
var hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf;

import {
  aggregatorTemplates
} from "./aggregators/aggregators.js";

import {
  pivotTableRenderer
} from "./renderers/pivotTableRenderer.js";

import {
  deepMerge
} from "./utilities/deepMerge.js";

import {
  PivotData
} from "./classes/pivotData.js";

import {
  sortOperations
} from "./utilities/sorter.js";

import {
  aggregators,
  renderers,
  locales
} from "./locales/en.js";

import {
  Sortable
} from './sortablejs/modular/sortable.core.esm.js';

Element.prototype.pivot = function(input, inputOpts, locale = "en") {
  var defaults, e, localeDefaults, localeStrings, opts, pivotData, result, x;
  if (locales[locale] == null) {
    locale = "en";
  }
  defaults = {
    cols: [],
    rows: [],
    vals: [],
    rowOrder: "key_a_to_z",
    colOrder: "key_a_to_z",
    dataClass: PivotData,
    filter: function() {
      return true;
    },
    aggregator: aggregatorTemplates.count()(),
    aggregatorName: "Count",
    sorters: {},
    derivedAttributes: {},
    renderer: pivotTableRenderer
  };
  //Locale override
  localeStrings = deepMerge(true, locales.en.localeStrings, locales[locale].localeStrings);
  localeDefaults = {
    rendererOptions: {localeStrings},
    localeStrings: localeStrings
  };
  opts = deepMerge(true, localeDefaults, {...defaults, ...inputOpts});
  result = null;
  try {
    pivotData = new opts.dataClass(input, opts);
    try {
      result = opts.renderer(pivotData, opts.rendererOptions);
    } catch (error) {
      e = error;
      if (typeof console !== "undefined" && console !== null) {
        console.error(e.stack);
      }
      result = document.getElementsByTagName("span").textContent(opts.localeStrings.renderError);
    }
  } catch (error) {
    e = error;
    if (typeof console !== "undefined" && console !== null) {
      console.error(e.stack);
    }
    result = document.getElementsByTagName("span").textContent(opts.localeStrings.computeError);
  }
  x = this;
  while (x.hasChildNodes()) {
    x.removeChild(x.lastChild);
  }
  return this.append(result);
};

//Pivot table core with UI
Element.prototype.pivotUI = function(input, inputOpts, overwrite = false, locale = "en") {
  var a, aggEl, aggregator, altToggleClass, attr, attrLength, attrValues, axisElems, c, colElems, colElemsFrag, colOrderArrow, colOrderLstnr, ctrlContainer, defaults, e, el, existingOpts, fChild, i, initialRender, j, l, len, len1, len2, len3, len4, localeDefaults, localeStrings, m, materializedInput, menu, n, o, opts, ordering, pivotTable, recordsProcessed, ref, ref1, ref2, ref3, refresh, refreshDelayed, renEl, renderer, rendererControl, rowElems, rowElemsFrag, rowOrderArrow, rowOrderLstnr, sChild, selOpts, shownAttributes, shownInAggregators, shownInDragDrop, sortableContainers, tr1, tr2, triId, uiCellList, uiTable, unused, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;
  if (locales[locale] == null) {
    locale = "en";
  }
  defaults = {
    derivedAttributes: {},
    aggregators: locales[locale].aggregators,
    renderers: locales[locale].renderers,
    hiddenAttributes: [],
    hiddenFromAggregators: [],
    hiddenFromDragDrop: [],
    menuLimit: 500,
    cols: [],
    rows: [],
    vals: [],
    rowOrder: "key_a_to_z",
    colOrder: "key_a_to_z",
    dataClass: PivotData,
    exclusions: {},
    inclusions: {},
    unusedAttrsVertical: 85,
    autoSortUnusedAttrs: false,
    onRefresh: null,
    showUI: true,
    filter: function() {
      return true;
    },
    sorters: {}
  };
  localeStrings = deepMerge(true, locales.en.localeStrings, locales[locale].localeStrings);
  localeDefaults = {
    rendererOptions: {localeStrings},
    localeStrings: localeStrings
  };
  existingOpts = this.dataPivotUIOptions;
  if ((existingOpts == null) || overwrite) {
    opts = deepMerge(true, localeDefaults, {...defaults, ...inputOpts});
  } else {
    opts = existingOpts;
  }
  try {
    attrValues = {};
    materializedInput = [];
    recordsProcessed = 0;
    PivotData.forEachRecord(input, opts.derivedAttributes, function(record) {
      var attr, base, ref, value;
      if (!opts.filter(record)) {
        return;
      }
      materializedInput.push(record);
      for (attr in record) {
        if (!hasProp.call(record, attr)) continue;
        if (attrValues[attr] == null) {
          attrValues[attr] = {};
          if (recordsProcessed > 0) {
            attrValues[attr]["null"] = recordsProcessed;
          }
        }
      }
      for (attr in attrValues) {
        value = (ref = record[attr]) != null ? ref : "null";
        if ((base = attrValues[attr])[value] == null) {
          base[value] = 0;
        }
        attrValues[attr][value]++;
      }
      return recordsProcessed++;
    });
    //Start building the output
    uiTable = document.createElement("table");
    uiTable.className = "pvtUi";
    rendererControl = "<td class=\"pvtUiCell\">";
    renderer = "<select class=\"pvtRenderer\" id=\"renderer\">";
    selOpts = "";
    ref = opts.renderers;
    for (x in ref) {
      if (!hasProp.call(ref, x)) continue;
      selOpts = selOpts + `<option value=\"${x}\">${x}</option>`;
    }
    renderer += selOpts + "</select>";
    rendererControl += renderer + "</td>";
    //Axis List, including the double-click menu
    shownAttributes = (function() {
      var results;
      results = [];
      for (a in attrValues) {
        if (indexOf.call(opts.hiddenAttributes, a) < 0) {
          results.push(a);
        }
      }
      return results;
    })();
    shownInAggregators = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = shownAttributes.length; j < len; j++) {
        c = shownAttributes[j];
        if (indexOf.call(opts.hiddenFromAggregators, c) < 0) {
          results.push(c);
        }
      }
      return results;
    })();
    shownInDragDrop = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = shownAttributes.length; j < len; j++) {
        c = shownAttributes[j];
        if (indexOf.call(opts.hiddenFromDragDrop, c) < 0) {
          results.push(c);
        }
      }
      return results;
    })();
    unusedAttrsVerticalAutoOverride = false;
    if (opts.unusedAttrsVertical === "auto") {
      unusedAttrsVerticalAutoCutoff = 120;
    } else {
      unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);
    }
    if (!isNaN(unusedAttrsVerticalAutoCutoff)) {
      attrLength = 0;
      for (j = 0, len = shownInDragDrop.length; j < len; j++) {
        a = shownInDragDrop[j];
        attrLength += a.length;
      }
      unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;
    }
    unused = document.createElement("td");
    if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {
      unused.className = "pvtAxisContainer pvtUnused pvtUiCell pvtVertList";
    } else {
      unused.className = "pvtAxisContainer pvtUnused pvtUiCell pvtHorizList";
    }
    //toggle class name of checkboxes
    altToggleClass = function() {
      if (this.className === "pvtFilter") {
        return this.className = "pvtFilter changed";
      } else {
        return this.className = "pvtFilter";
      }
    };
    //for triangle link distinction
    triId = 1;
    for (i in shownInDragDrop) {
      if (!hasProp.call(shownInDragDrop, i)) continue;
      attr = shownInDragDrop[i];
      (function(attr) {
        var applyBtn, applyLstnr, attrElem, cancelBtn, cancelLstnr, checkContainer, closeFilterBox, controls, defaultState, el, filterBoxList, filterItem, filterItemExcluded, finalButtons, hasExcludedItem, inputListener, l, len1, len2, len3, m, n, placeholder, ref1, searchFilter, selAll, selAllLstnr, selNone, selNoneLstnr, sorter, triLink, triangleLink, triangleLinkLstnr, v, value, valueCount, valueList, valueListStr, values;
        values = (function() {
          var results;
          results = [];
          for (v in attrValues[attr]) {
            results.push(v);
          }
          return results;
        })();
        hasExcludedItem = false;
        valueList = document.createElement("div");
        valueList.className = "pvtFilterBox";
        valueList.style.display = "none";
        valueListStr = `<h4> <span>${attr}</span> <span class=\"count\">\"(${values.length})\"</span> </h4>`;
        valueList.insertAdjacentHTML("beforeend", valueListStr);
        if (values.length > opts.menuLimit) {
          valueListStr = `<p>${opts.localeStrings.tooMany}</p>`;
          valueList.insertAdjacentHTML("beforeend", valueListStr);
        } else {
          if (values.length > 5) {
            controls = "<p>";
            sorter = sortOperations.getSort(opts.sorters, attr);
            placeholder = opts.localeStrings.filterResults;
            //onkeyup event for text input
            inputListener = function() {
              var accept, accept_gen, inputFilter, l, len1, results, spanElem, spanValQuery;
              inputFilter = this.value.toLowerCase().trim();
              accept_gen = function(prefix, accepted) {
                return function(v) {
                  var real_filter, ref1;
                  real_filter = inputFilter.substring(prefix.length).trim();
                  if (real_filter.length === 0) {
                    return true;
                  }
                  return ref1 = Math.sign(sorter(v.toLowerCase(), real_filter)), indexOf.call(accepted, ref1) >= 0;
                };
              };
              accept = inputFilter.indexOf(">=") === 0 ? accept_gen(">=", [1, 0]) : inputFilter.indexOf("<=") === 0 ? accept_gen("<=", [-1, 0]) : inputFilter.indexOf(">") === 0 ? accept_gen(">", [1]) : inputFilter.indexOf("<") === 0 ? accept_gen("<", [-1]) : inputFilter.indexOf("~") === 0 ? function(v) {
                if (inputFilter.substring(1).trim().length === 0) {
                  return true;
                }
                return v.toLowerCase().match(inputFilter.substring(1));
              } : function(v) {
                return v.toLowerCase().indexOf(inputFilter) !== -1;
              };
              spanValQuery = valueList.querySelectorAll('.pvtCheckContainer .value');
              results = [];
              for (l = 0, len1 = spanValQuery.length; l < len1; l++) {
                spanElem = spanValQuery[l];
                if (accept(spanElem.textContent)) {
                  results.push(spanElem.parentNode.parentNode.style.display = "block");
                } else {
                  results.push(spanElem.parentNode.parentNode.style.display = "none");
                }
              }
              return results;
            };
            controls += `<input type=\"text\" placeholder=\"${placeholder}\" class=\"pvtSearch\" data-target=\"axis_${i}\"></p><br>`;
            //click listeners for "select-all" and "select-none" buttons
            selAllLstnr = function() {
              var elem, l, len1, selQuery;
              selQuery = checkContainer.querySelectorAll('.pvtFilter');
              if (selQuery !== 0) {
                for (l = 0, len1 = selQuery.length; l < len1; l++) {
                  elem = selQuery[l];
                  if (elem.parentNode.parentNode.style.display !== "none") {
                    if (!elem.checked) {
                      elem.checked = true;
                    }
                    if (elem.className === "pvtFilter") {
                      elem.className = "pvtFilter changed";
                    } else {
                      elem.className = "pvtFilter";
                    }
                  }
                }
              }
              return false;
            };
            selNoneLstnr = function() {
              var elem, l, len1, selQuery;
              selQuery = checkContainer.querySelectorAll('.pvtFilter');
              if (selQuery !== 0) {
                for (l = 0, len1 = selQuery.length; l < len1; l++) {
                  elem = selQuery[l];
                  if (elem.parentNode.parentNode.style.display !== "none") {
                    if (elem.checked) {
                      elem.checked = false;
                    }
                    if (elem.className === "pvtFilter") {
                      elem.className = "pvtFilter changed";
                    } else {
                      elem.className = "pvtFilter";
                    }
                  }
                }
              }
              return false;
            };
            controls += `<button type=\"button\" id=\"selAll\">${opts.localeStrings.selectAll}</button>`;
            controls += `<button type=\"button\" id=\"selNone\">${opts.localeStrings.selectNone}</button>`;
            valueList.insertAdjacentHTML("beforeend", controls);
            
            //Add event listeners to select-all, select-none and search filter
            searchFilter = valueList.querySelectorAll(".pvtSearch");
            for (l = 0, len1 = searchFilter.length; l < len1; l++) {
              el = searchFilter[l];
              el.addEventListener("keyup", inputListener);
            }
            selAll = valueList.querySelector("#selAll");
            selAll.addEventListener("click", selAllLstnr);
            selNone = valueList.querySelector("#selNone");
            selNone.addEventListener("click", selNoneLstnr);
          }
          checkContainer = "<div class=\"pvtCheckContainer\" id=\"chckContainer\">";
          ref1 = values.sort(sortOperations.getSort(opts.sorters, attr));
          for (m = 0, len2 = ref1.length; m < len2; m++) {
            value = ref1[m];
            valueCount = attrValues[attr][value];
            filterItem = "<p><label>";
            filterItemExcluded = false;
            if (opts.inclusions[attr]) {
              filterItemExcluded = (indexOf.call(opts.inclusions[attr], value) < 0);
            } else if (opts.exclusions[attr]) {
              filterItemExcluded = (indexOf.call(opts.exclusions[attr], value) >= 0);
            }
            hasExcludedItem || (hasExcludedItem = filterItemExcluded);
            defaultState = (!filterItemExcluded ? "checked" : "");
            filterItem += `<input type=\"checkbox\" class=\"pvtFilter\" data-filter=\"${attr + "," + value}\" ${defaultState}>`;
            filterItem += `<span class=\"value\">${value}</span>`;
            filterItem += `<span class=\"count\">\"(\"${valueCount}\")\"</span></label></p>`;
            checkContainer += filterItem;
          }
          valueList.insertAdjacentHTML("beforeend", checkContainer);
          checkContainer = valueList.querySelector("#chckContainer");
          filterBoxList = valueList.querySelectorAll(".pvtFilter");
          for (n = 0, len3 = filterBoxList.length; n < len3; n++) {
            el = filterBoxList[n];
            el.addEventListener("change", altToggleClass);
          }
        }
        closeFilterBox = function(target) {
          var cBoxes, checked, containerList, len4, len5, len6, o, p, pvtSearchList, q, targetAxis;
          checked = 0;
          cBoxes = valueList.querySelectorAll('[type="checkbox"]');
          targetAxis = document.querySelector(`.${target}`);
          for (o = 0, len4 = cBoxes.length; o < len4; o++) {
            el = cBoxes[o];
            if (!!el.checked) {
              checked++;
            }
          }
          if (cBoxes.length > checked) {
            targetAxis.classList.add("pvtFilteredAttribute");
          } else {
            targetAxis.classList.remove("pvtFilteredAttribute");
          }
          pvtSearchList = valueList.querySelectorAll(".pvtSearch");
          for (p = 0, len5 = pvtSearchList.length; p < len5; p++) {
            el = pvtSearchList[p];
            el.value = "";
          }
          containerList = valueList.querySelectorAll(".pvtCheckContainer p");
          for (q = 0, len6 = containerList.length; q < len6; q++) {
            el = containerList[q];
            el.style.display = "block";
          }
          return valueList.style.display = "none";
        };
        finalButtons = "<p>";
        if (hasExcludedItem) {
          attrElem = `<li class=\"axis_${i} pvtFilteredAttribute\">`;
        } else {
          attrElem = `<li class=\"axis_${i}\">`;
        }
        applyLstnr = function() {
          var applyQuery, len4, o;
          applyQuery = valueList.querySelectorAll('.changed');
          for (o = 0, len4 = applyQuery.length; o < len4; o++) {
            el = applyQuery[o];
            el.classList.remove("changed");
          }
          console.log(applyQuery);
          if (applyQuery !== 0) {
            refresh();
          }
          return closeFilterBox(this.dataset.target);
        };
        if (values.length <= opts.menuLimit) {
          finalButtons += `<button type=\"button\" id=\"applyBtn\" data-target=\"axis_${i}\">${opts.localeStrings.apply}</button>`;
        }
        cancelLstnr = function() {
          var cancelQuery, len4, o;
          cancelQuery = valueList.querySelectorAll('.changed');
          for (o = 0, len4 = cancelQuery.length; o < len4; o++) {
            el = cancelQuery[o];
            if (el.checked) {
              el.checked = false;
            } else {
              el.checked = true;
            }
            el.classList.remove("changed");
          }
          return closeFilterBox(this.dataset.target);
        };
        finalButtons += `<button type\"button\" id=\"cancelBtn\" data-target=\"axis_${i}\">${opts.localeStrings.cancel}</button></p>`;
        valueList.insertAdjacentHTML("beforeend", finalButtons);
        cancelBtn = valueList.querySelector("#cancelBtn");
        applyBtn = valueList.querySelector("#applyBtn");
        cancelBtn.addEventListener("click", cancelLstnr);
        applyBtn.addEventListener("click", applyLstnr);
        triangleLinkLstnr = function() {
          var position;
          position = {
            left: this.offsetLeft,
            top: this.offsetTop
          };
          valueList.style.top = position.top + 10;
          valueList.style.left = position.left + 10;
          return valueList.style.display = "block";
        };
        triangleLink = `<span class=\"pvtTriangle\" id=\"tri_${triId}\">&#x25BE;</span>`;
        attrElem += `<span class=\"pvtAttr\" data-attrname=\"${attr}\">${attr + triangleLink}</span></li>`;
        unused.insertAdjacentHTML("beforeend", attrElem);
        unused.appendChild(valueList);
        triLink = unused.querySelector(`#tri_${triId}`);
        triLink.addEventListener("click", triangleLinkLstnr);
        return triId++;
      })(attr);
    }
    //aggregator menu and value area
    aggregator = "<select class=\"pvtAggregator\" id=\"aggr\">";
    ref1 = opts.aggregators;
    for (x in ref1) {
      if (!hasProp.call(ref1, x)) continue;
      aggregator += `<option value=\"${x}\">${x}</option>`;
    }
    aggregator += "</select>";
    ordering = {
      key_a_to_z: {
        rowSymbol: "\u2195",
        colSymbol: "\u2194",
        next: "value_a_to_z"
      },
      value_a_to_z: {
        rowSymbol: "\u2193",
        colSymbol: "\u2192",
        next: "value_z_to_a"
      },
      value_z_to_a: {
        rowSymbol: "\u2191",
        colSymbol: "\u2190",
        next: "key_a_to_z"
      }
    };
    rowOrderLstnr = function() {
      this.dataset.order = ordering[this.dataset.order].next;
      this.textContent = ordering[this.dataset.order].rowSymbol;
      return refresh();
    };
    rowOrderArrow = `<a role=\"button\" class=\"pvtRowOrder\" data-order=\"${opts.rowOrder}\" id=\"rowOrder\">${ordering[opts.rowOrder].rowSymbol}</a>`;
    colOrderLstnr = function() {
      this.dataset.order = ordering[this.dataset.order].next;
      this.textContent = ordering[this.dataset.order].colSymbol;
      return refresh();
    };
    colOrderArrow = `<a role=\"button\" class=\"pvtColOrder\" data-order=\"${opts.colOrder}\" id=\"colOrder\">${ordering[opts.colOrder].colSymbol}</a>`;
    tr1 = "<tr id=\"tr1\">";
    menu = `<td class=\"pvtVals pvtUiCell\"> ${aggregator + rowOrderArrow + colOrderArrow}<br></td>`;
    tr1 += menu + "<td class=\"pvtAxisContainer pvtHorizList pvtUiCell pvtCols\" id=\"pvtCol\"></td></tr>";
    uiTable.insertAdjacentHTML("beforeend", tr1);
    aggregator = uiTable.querySelector("#aggr");
    rowOrderArrow = uiTable.querySelector("#rowOrder");
    rowOrderArrow.addEventListener("click", rowOrderLstnr);
    colOrderArrow = uiTable.querySelector("#colOrder");
    colOrderArrow.addEventListener("click", colOrderLstnr);
    uiTable = uiTable.querySelector("tbody");
    aggregator.addEventListener("change", function() {
      return refresh();
    });
    tr2 = "<tr><td class=\"pvtAxisContainer pvtUiCell pvtRows\" id=\"pvtRow\" style=\"vertical-align: top;\"></td>";
    //the actual pivot table container
    pivotTable = "<td class=\"pvtRendererArea\" style=\"vertical-align:top;\" id=\"pivotTable\"></td></tr>";
    tr2 += pivotTable;
    uiTable.insertAdjacentHTML("beforeend", tr2);
    pivotTable = uiTable.querySelector("#pivotTable");
    //finally the renderer dropdown and unused attributes are inserted at the requested location
    if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {
      fChild = uiTable.querySelector('tr:nth-child(1)');
      fChild.insertAdjacentHTML("afterbegin", rendererControl);
      sChild = uiTable.querySelector('tr:nth-child(2)');
      sChild.prepend(unused);
    } else {
      ctrlContainer = document.createElement("tr");
      ctrlContainer.insertAdjacentHTML("beforeend", rendererControl);
      ctrlContainer.appendChild(unused);
      uiTable.prepend(ctrlContainer);
    }
    renderer = uiTable.querySelector("#renderer");
    renderer.addEventListener("change", function() {
      return refresh();
    });
    //render the UI in its default state
    this.appendChild(uiTable);
    //setup the UI initial state as requested by moving elements around
    colElems = this.querySelector("#pvtCol");
    colElemsFrag = document.createDocumentFragment();
    rowElems = this.querySelector("#pvtRow");
    rowElemsFrag = document.createDocumentFragment();
    ref2 = opts.cols;
    for (l = 0, len1 = ref2.length; l < len1; l++) {
      x = ref2[l];
      axisElems = this.querySelector(`.axis_${shownInDragDrop.indexOf(x)}`);
      colElemsFrag.appendChild(axisElems);
    }
    ref3 = opts.rows;
    for (m = 0, len2 = ref3.length; m < len2; m++) {
      x = ref3[m];
      axisElems = this.querySelector(`.axis_${shownInDragDrop.indexOf(x)}`);
      rowElemsFrag.appendChild(axisElems);
    }
    colElems.appendChild(colElemsFrag);
    rowElems.appendChild(rowElemsFrag);
    if (opts.aggregatorName != null) {
      aggEl = this.querySelector("#aggr");
      aggEl.value = opts.aggregatorName;
    }
    if (opts.rendererName != null) {
      renEl = this.querySelector("#renderer");
      renEl.value = opts.rendererName;
    }
    uiCellList = this.querySelectorAll(".pvtUiCell");
    if (!opts.showUI) {
      for (n = 0, len3 = uiCellList.length; n < len3; n++) {
        el = uiCellList[n];
        el.style.display = "none";
      }
    }
    initialRender = true;
    //set up for refreshing
    refreshDelayed = () => {
      var dDown, dDownList, elList, exclusions, filter, inclusions, len4, len5, len6, len7, len8, len9, newDropdown, numInputsToProcess, o, p, pivotUIOptions, pvtColList, pvtRowList, pvtVals, q, r, ref4, ref5, s, subopts, t, u, uiOpts, vals;
      //startTime = performance.now()
      subopts = {
        derivedAttributes: opts.derivedAttributes,
        localeStrings: opts.localeStrings,
        rendererOptions: opts.rendererOptions,
        sorters: opts.sorters,
        cols: [],
        rows: [],
        dataClass: opts.dataClass
      };
      numInputsToProcess = (ref4 = opts.aggregators[aggregator.value]([])().numInputs) != null ? ref4 : 0;
      vals = [];
      pvtRowList = this.querySelectorAll('#pvtRow .pvtAttr');
      for (o = 0, len4 = pvtRowList.length; o < len4; o++) {
        el = pvtRowList[o];
        subopts.rows.push(el.dataset.attrname);
      }
      pvtColList = this.querySelectorAll('#pvtCol .pvtAttr');
      for (p = 0, len5 = pvtColList.length; p < len5; p++) {
        el = pvtColList[p];
        subopts.cols.push(el.dataset.attrname);
      }
      dDownList = this.querySelectorAll('.pvtAttrDropdown');
      for (q = 0, len6 = dDownList.length; q < len6; q++) {
        el = dDownList[q];
        if (numInputsToProcess === 0) {
          el.parentNode.removeChild(el);
        } else {
          numInputsToProcess--;
          if (el.value !== "") {
            vals.push(el.value);
          }
        }
      }
      if (numInputsToProcess !== 0) {
        pvtVals = this.querySelectorAll('.pvtVals');
        newDropdown = "<select class=\"pvtAttrDropdown\" id=\"newDropDown\">";
        for (x = r = 0, ref5 = numInputsToProcess; (0 <= ref5 ? r < ref5 : r > ref5); x = 0 <= ref5 ? ++r : --r) {
          for (s = 0, len7 = shownInAggregators.length; s < len7; s++) {
            attr = shownInAggregators[s];
            newDropdown += `<option value=\"${attr}\">${attr}</option>`;
          }
        }
        pvtVals[0].insertAdjacentHTML("beforeend", newDropdown + "</select>");
        dDown = pvtVals[0].querySelector("#newDropDown");
        dDown.addEventListener("change", function() {
          return refresh();
        });
      }
      if (initialRender) {
        vals = opts.vals;
        i = 0;
        elList = this.querySelectorAll(".pvtAttrDropdown");
        for (t = 0, len8 = elList.length; t < len8; t++) {
          el = elList[t];
          el.value = vals[i];
          i++;
        }
        initialRender = false;
      }
      subopts.aggregatorName = aggregator.value;
      subopts.vals = vals;
      subopts.aggregator = opts.aggregators[aggregator.value](vals);
      subopts.renderer = opts.renderers[renderer.value];
      subopts.rowOrder = rowOrderArrow.dataset.order;
      subopts.colOrder = colOrderArrow.dataset.order;
      //construct filter here
      exclusions = {};
      inclusions = {};
      elList = this.querySelectorAll('.pvtFilter');
      for (u = 0, len9 = elList.length; u < len9; u++) {
        el = elList[u];
        if (!el.checked) {
          filter = el.dataset.filter;
          filter = filter.split(',');
          if (exclusions[filter[0]] != null) {
            exclusions[filter[0]].push(filter[1]);
          } else {
            exclusions[filter[0]] = [filter[1]];
          }
        } else {
          filter = el.dataset.filter;
          filter = filter.split(',');
          if (exclusions[filter[0]] != null) {
            if (inclusions[filter[0]] != null) {
              inclusions[filter[0]].push(filter[1]);
            } else {
              inclusions[filter[0]] = [filter[1]];
            }
          }
        }
      }
      subopts.filter = function(record) {
        var excludedItems, k, ref6, ref7;
        if (!opts.filter(record)) {
          return false;
        }
        for (k in exclusions) {
          excludedItems = exclusions[k];
          if (ref6 = "" + ((ref7 = record[k]) != null ? ref7 : 'null'), indexOf.call(excludedItems, ref6) >= 0) {
            return false;
          }
        }
        return true;
      };
      pivotTable.pivot(materializedInput, subopts);
      uiOpts = {
        cols: subopts.cols,
        rows: subopts.rows,
        colOrder: subopts.colOrder,
        rowOrder: subopts.rowOrder,
        vals: vals,
        exclusions: exclusions,
        inclusions: inclusions,
        inclusionsInfo: inclusions, //duplicated for backwards-compatibility
        aggregatorName: aggregator.value,
        rendererName: renderer.value
      };
      pivotUIOptions = {...opts, uiOpts};
      this.dataPivotUIOptions = pivotUIOptions;
      //if requested make sure unused columns are in alphabetical order
      //To be implemented
      if (opts.autoSortUnusedAttrs) {
        alert("Found use of property: autoSortUnusedAttrs");
      }
      pivotTable.style.opacity = 1;
      if (opts.onRefresh != null) {
        return opts.onRefresh(pivotUIOptions);
      }
    };
    //endTime = performance.now()
    //console.log(endTime-startTime)
    refresh = () => {
      pivotTable.style.opacity = 0.5;
      return setTimeout(refreshDelayed, 10);
    };
    
    //the very first refresh will display the table
    refresh();
    sortableContainers = document.querySelectorAll(".pvtAxisContainer");
    for (o = 0, len4 = sortableContainers.length; o < len4; o++) {
      el = sortableContainers[o];
      Sortable.create(el, {
        group: 'sortables',
        onAdd: function() {
          return refresh();
        },
        ghostClass: 'pvtPlaceholder'
      });
    }
  } catch (error) {
    e = error;
    if (typeof console !== "undefined" && console !== null) {
      console.error(e.stack);
    }
    this.textContent = opts.localeStrings.uiRendererError;
  }
  return this;
};
